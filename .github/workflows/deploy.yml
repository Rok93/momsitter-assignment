name: Deploy kyeongrok momsitter-assignment
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECS_CLUSTER_NAME: momsitter-backend
      ECR_REPOSITORY_NAME: momsitter-kyeongrok-dev
      ECS_CONTAINER_NAME: momsitter-kyeongrok-container
      ECS_SERVICE_NAME: momsitter-kyeongrok-service-dev
      TASK_DEFINITION_NAME: momsitter-kyeongrok-task-dev
      # AWS ECS 콘솔에서 이름 모두 일치하는지 확인

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials For Devzone
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # Github Repository Secrets 메뉴에 키 값들 추가해주기

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'alpine'
          java-version: 8
          cache: 'gradle' # https://github.com/actions/setup-java#caching-packages-dependencies

      - name: build gradle
        run: ./gradlew bootJar

      - name: Download dd-java-agent
        run: wget -O momsitter-api/dd-java-agent.jar https://dtdg.co/latest-java-tracer
        # -O 옵션을 통해 파일 경로 및 이름 지정하는 것임.

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE_TAG: . # /Dockerfile
          IMAGE_TAG: ${{ github.sha }} # Github가 제공하는 암호화
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG $SERVICE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG"
      - name: Download Task Definition Template
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION_NAME }} \
            --query taskDefinition \
            > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true